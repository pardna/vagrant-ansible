<?php
namespace App\Services\common\payments;
use App\Services\BaseService;

class GoCardlessProService extends BaseService
{

    // Sandbox is the default - uncomment to change to production
    // GoCardless::$environment = 'production';

    protected $client;

    public function __construct($db, $config, $gocardless_env)
    {
        // Initialize GoCardless
        $this->db = $db;
        $gocarless_env = $this->goCardlessEnvironment($gocardless_env['environment']);
        $access_token = $config['access_token'];
        $this->client = new \GoCardlessPro\Client(array(
          'access_token' => $access_token,
          'environment'  => $gocarless_env
        ));
    }

    public function goCardlessEnvironment($environment){
        if (isset($environment) && strcasecmp($environment, "live") == 0){
          return \GoCardlessPro\Environment::LIVE;
        } else {
          return \GoCardlessPro\Environment::SANDBOX;
       }
    }


    // To start the billing process the user is redirected to the GoCardless checkout page,
    // details of the payment are encoded in the request URL generated by this method.
    public function getRedirectFlowUrl($params)
    {
      $subsc_url = $this->client->redirectFlows()->create($params);
      return $subsc_url;
    }

    public function createAOneOffPayment($bill){
      $payment_details =  (array) $bill;
      $bill_url = $this->client->new_bill_url($payment_details);
      return $bill_url;
    }

    //Necessary - When the user has gone onto the payments page, we use this service to
    // confirm resource that the user has indeed successfuly completed payment
    public function confirmGoCardlessRessource($confirm_params){
      // Required confirm variables
      // $confirm_params = array(
      //   'resource_id'    => $_GET['resource_id'],
      //   'resource_type'  => $_GET['resource_type'],
      //   'resource_uri'   => $_GET['resource_uri'],
      //   'signature'      => $_GET['signature'],
      //   'state' => ''
      // );
      $confirmed_resource = $this->client->confirm_resource($confirm_params);
      return $confirmed_resource;
    }

    public function isSuccessfulResponse($api_response){
      if (is_numeric($api_response['status_code']) && $this->isSuccessfulStatuscode($api_response['status_code'])){

      }
    }

    public function isSuccessfulStatuscode($status_code){

    }



}
